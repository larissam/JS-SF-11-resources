// FIREBASE Reference

//
// Set up your DB:
//
// You need to put the name of your endpoint (ie. what kind of data are you storing?)
// as an argument to the ref function.
// For example, if we were storing cats, we would write:
// const service = firebase.database().ref("cats");

//
// Create:
//
// const cat = {
//   name: "Milano",
//   age: 7,
//   favoriteFoods: ["tuna", "squid", "chicken"]
// };
// service.push(cat);

//
// Read:
//
// let cats = {};
// service.on("value", function(snapshot) {
//   cats = snapshot.val();
//   // Do DOM manipulation with cats variable here.
//   // NOTE: cats is an object with a key (generated by Firebase)
//   // for each cat you added, set to the value of each cat
//   // that you added

//   // Based on our example, the cats variable would look something like:
//   // {
//   //   "-LHaKIAIZ8-W0feX_Dz5": {
//   //     name: "Milano",
//   //     age: 7,
//   //     favoriteFoods: ["tuna", "squid", "chicken"]
//   //   }
//   // }
// });

//
// Update:
//
// You need to pull the key out from the DOM.
// const key = $(this)
//   .parent()
//   .data("key");
// service.child(key).update({
//   age: 8
// });

//
// Delete:
//
// You need to pull the key out from the DOM.
// const key = $(this)
//   .parent()
//   .data("key");
// service.child(key).remove();

const firebaseService = (function() {
  const service = firebase.database().ref("posts");
  let data = {};

  return {
    addPost: function(post) {
      service.push({
        name: post,
        likes: 0
      });
    },
    getPost: function(postId) {
      return data[postId];
    },
    removePost: function(postId) {
      service.child(postId).remove();
    },
    updatePost: function(postId, updates) {
      service.child(postId).update(updates);
    },
    onChange: function(callback) {
      service.on("value", function(snapshot) {
        data = snapshot.val() || {};
        callback(data);
      });
    }
  };
})();

console.log("Firebase service: ", firebaseService);

$("#post").on("click", function() {
  const userInput = $("#message").val();
  firebaseService.addPost(userInput);

  $("#message").val("");
});

firebaseService.onChange(function(data) {
  $("#message-board").empty(); // clear board of all posts and rerender based on what's in Firebase

  // Loop through the keys
  const itemKeys = Object.keys(data);
  for (let i = 0; i < itemKeys.length; i++) {
    const key = itemKeys[i];
    const item = data[key];

    // we encode the key using a data attribute
    const template = `
      <li data-key=${key}>
        ${item.name}
        <i class="fa fa-trash pull-right delete"></i>
        <i class="fa fa-thumbs-down pull-right dislike"></i>
        <i class="fa fa-thumbs-up pull-right like"></i>
        <span class="pull-right likes">${item.likes}</span>
      </li>
    `;

    $("#message-board").append(template);
  }
});

$("#message-board").on("click", ".delete", function() {
  const key = $(this)
    .parent() // use use "parent()" here since the data-key is on the li
    .data("key");
  firebaseService.removePost(key);
});

$("#message-board").on("click", ".like", function() {
  const key = $(this)
    .parent() // use use "parent()" here since the data-key is on the li
    .data("key");
  firebaseService.updatePost(key, {
    likes: firebaseService.getPost(key).likes + 1
  });
});

$("#message-board").on("click", ".dislike", function() {
  const key = $(this)
    .parent() // use use "parent()" here since the data-key is on the li
    .data("key");

  firebaseService.updatePost(key, {
    likes: firebaseService.getPost(key).likes - 1
  });
});
